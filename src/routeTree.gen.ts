/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TodoIndexImport } from './routes/todo/index'
import { Route as StoreIndexImport } from './routes/store/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as TodoTodoidImport } from './routes/todo/$todoid'
import { Route as StoreStoreIdImport } from './routes/store/$storeId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TodoIndexRoute = TodoIndexImport.update({
  id: '/todo/',
  path: '/todo/',
  getParentRoute: () => rootRoute,
} as any)

const StoreIndexRoute = StoreIndexImport.update({
  id: '/store/',
  path: '/store/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const TodoTodoidRoute = TodoTodoidImport.update({
  id: '/todo/$todoid',
  path: '/todo/$todoid',
  getParentRoute: () => rootRoute,
} as any)

const StoreStoreIdRoute = StoreStoreIdImport.update({
  id: '/store/$storeId',
  path: '/store/$storeId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/store/$storeId': {
      id: '/store/$storeId'
      path: '/store/$storeId'
      fullPath: '/store/$storeId'
      preLoaderRoute: typeof StoreStoreIdImport
      parentRoute: typeof rootRoute
    }
    '/todo/$todoid': {
      id: '/todo/$todoid'
      path: '/todo/$todoid'
      fullPath: '/todo/$todoid'
      preLoaderRoute: typeof TodoTodoidImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/store/': {
      id: '/store/'
      path: '/store'
      fullPath: '/store'
      preLoaderRoute: typeof StoreIndexImport
      parentRoute: typeof rootRoute
    }
    '/todo/': {
      id: '/todo/'
      path: '/todo'
      fullPath: '/todo'
      preLoaderRoute: typeof TodoIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/store/$storeId': typeof StoreStoreIdRoute
  '/todo/$todoid': typeof TodoTodoidRoute
  '/auth': typeof AuthIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/store': typeof StoreIndexRoute
  '/todo': typeof TodoIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/store/$storeId': typeof StoreStoreIdRoute
  '/todo/$todoid': typeof TodoTodoidRoute
  '/auth': typeof AuthIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/store': typeof StoreIndexRoute
  '/todo': typeof TodoIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/store/$storeId': typeof StoreStoreIdRoute
  '/todo/$todoid': typeof TodoTodoidRoute
  '/auth/': typeof AuthIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/store/': typeof StoreIndexRoute
  '/todo/': typeof TodoIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/store/$storeId'
    | '/todo/$todoid'
    | '/auth'
    | '/dashboard'
    | '/store'
    | '/todo'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/store/$storeId'
    | '/todo/$todoid'
    | '/auth'
    | '/dashboard'
    | '/store'
    | '/todo'
  id:
    | '__root__'
    | '/'
    | '/store/$storeId'
    | '/todo/$todoid'
    | '/auth/'
    | '/dashboard/'
    | '/store/'
    | '/todo/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  StoreStoreIdRoute: typeof StoreStoreIdRoute
  TodoTodoidRoute: typeof TodoTodoidRoute
  AuthIndexRoute: typeof AuthIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  StoreIndexRoute: typeof StoreIndexRoute
  TodoIndexRoute: typeof TodoIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  StoreStoreIdRoute: StoreStoreIdRoute,
  TodoTodoidRoute: TodoTodoidRoute,
  AuthIndexRoute: AuthIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  StoreIndexRoute: StoreIndexRoute,
  TodoIndexRoute: TodoIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/store/$storeId",
        "/todo/$todoid",
        "/auth/",
        "/dashboard/",
        "/store/",
        "/todo/"
      ]
    },
    "/": {
      "filePath": "index.ts"
    },
    "/store/$storeId": {
      "filePath": "store/$storeId.ts"
    },
    "/todo/$todoid": {
      "filePath": "todo/$todoid.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.ts"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.ts"
    },
    "/store/": {
      "filePath": "store/index.ts"
    },
    "/todo/": {
      "filePath": "todo/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
